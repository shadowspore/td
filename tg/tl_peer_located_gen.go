// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// PeerLocated represents TL type `peerLocated#ca461b5d`.
// Peer geolocated nearby
//
// See https://core.telegram.org/constructor/peerLocated for reference.
type PeerLocated struct {
	// Peer
	Peer PeerClass
	// Validity period of current data
	Expires int
	// Distance from the peer in meters
	Distance int
}

// PeerLocatedTypeID is TL type id of PeerLocated.
const PeerLocatedTypeID = 0xca461b5d

func (p *PeerLocated) Zero() bool {
	if p == nil {
		return true
	}
	if !(p.Peer == nil) {
		return false
	}
	if !(p.Expires == 0) {
		return false
	}
	if !(p.Distance == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (p *PeerLocated) String() string {
	if p == nil {
		return "PeerLocated(nil)"
	}
	type Alias PeerLocated
	return fmt.Sprintf("PeerLocated%+v", Alias(*p))
}

// FillFrom fills PeerLocated from given interface.
func (p *PeerLocated) FillFrom(from interface {
	GetPeer() (value PeerClass)
	GetExpires() (value int)
	GetDistance() (value int)
}) {
	p.Peer = from.GetPeer()
	p.Expires = from.GetExpires()
	p.Distance = from.GetDistance()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PeerLocated) TypeID() uint32 {
	return PeerLocatedTypeID
}

// TypeName returns name of type in TL schema.
func (*PeerLocated) TypeName() string {
	return "peerLocated"
}

// TypeInfo returns info about TL type.
func (p *PeerLocated) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "peerLocated",
		ID:   PeerLocatedTypeID,
	}
	if p == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Peer",
			SchemaName: "peer",
		},
		{
			Name:       "Expires",
			SchemaName: "expires",
		},
		{
			Name:       "Distance",
			SchemaName: "distance",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (p *PeerLocated) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode peerLocated#ca461b5d as nil")
	}
	b.PutID(PeerLocatedTypeID)
	return p.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (p *PeerLocated) EncodeBare(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode peerLocated#ca461b5d as nil")
	}
	if p.Peer == nil {
		return fmt.Errorf("unable to encode peerLocated#ca461b5d: field peer is nil")
	}
	if err := p.Peer.Encode(b); err != nil {
		return fmt.Errorf("unable to encode peerLocated#ca461b5d: field peer: %w", err)
	}
	b.PutInt(p.Expires)
	b.PutInt(p.Distance)
	return nil
}

// GetPeer returns value of Peer field.
func (p *PeerLocated) GetPeer() (value PeerClass) {
	return p.Peer
}

// GetExpires returns value of Expires field.
func (p *PeerLocated) GetExpires() (value int) {
	return p.Expires
}

// GetDistance returns value of Distance field.
func (p *PeerLocated) GetDistance() (value int) {
	return p.Distance
}

// Decode implements bin.Decoder.
func (p *PeerLocated) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode peerLocated#ca461b5d to nil")
	}
	if err := b.ConsumeID(PeerLocatedTypeID); err != nil {
		return fmt.Errorf("unable to decode peerLocated#ca461b5d: %w", err)
	}
	return p.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (p *PeerLocated) DecodeBare(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode peerLocated#ca461b5d to nil")
	}
	{
		value, err := DecodePeer(b)
		if err != nil {
			return fmt.Errorf("unable to decode peerLocated#ca461b5d: field peer: %w", err)
		}
		p.Peer = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode peerLocated#ca461b5d: field expires: %w", err)
		}
		p.Expires = value
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode peerLocated#ca461b5d: field distance: %w", err)
		}
		p.Distance = value
	}
	return nil
}

// construct implements constructor of PeerLocatedClass.
func (p PeerLocated) construct() PeerLocatedClass { return &p }

// Ensuring interfaces in compile-time for PeerLocated.
var (
	_ bin.Encoder     = &PeerLocated{}
	_ bin.Decoder     = &PeerLocated{}
	_ bin.BareEncoder = &PeerLocated{}
	_ bin.BareDecoder = &PeerLocated{}

	_ PeerLocatedClass = &PeerLocated{}
)

// PeerSelfLocated represents TL type `peerSelfLocated#f8ec284b`.
// Current peer
//
// See https://core.telegram.org/constructor/peerSelfLocated for reference.
type PeerSelfLocated struct {
	// Expiry of geolocation info for current peer
	Expires int
}

// PeerSelfLocatedTypeID is TL type id of PeerSelfLocated.
const PeerSelfLocatedTypeID = 0xf8ec284b

func (p *PeerSelfLocated) Zero() bool {
	if p == nil {
		return true
	}
	if !(p.Expires == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (p *PeerSelfLocated) String() string {
	if p == nil {
		return "PeerSelfLocated(nil)"
	}
	type Alias PeerSelfLocated
	return fmt.Sprintf("PeerSelfLocated%+v", Alias(*p))
}

// FillFrom fills PeerSelfLocated from given interface.
func (p *PeerSelfLocated) FillFrom(from interface {
	GetExpires() (value int)
}) {
	p.Expires = from.GetExpires()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PeerSelfLocated) TypeID() uint32 {
	return PeerSelfLocatedTypeID
}

// TypeName returns name of type in TL schema.
func (*PeerSelfLocated) TypeName() string {
	return "peerSelfLocated"
}

// TypeInfo returns info about TL type.
func (p *PeerSelfLocated) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "peerSelfLocated",
		ID:   PeerSelfLocatedTypeID,
	}
	if p == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Expires",
			SchemaName: "expires",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (p *PeerSelfLocated) Encode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode peerSelfLocated#f8ec284b as nil")
	}
	b.PutID(PeerSelfLocatedTypeID)
	return p.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (p *PeerSelfLocated) EncodeBare(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't encode peerSelfLocated#f8ec284b as nil")
	}
	b.PutInt(p.Expires)
	return nil
}

// GetExpires returns value of Expires field.
func (p *PeerSelfLocated) GetExpires() (value int) {
	return p.Expires
}

// Decode implements bin.Decoder.
func (p *PeerSelfLocated) Decode(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode peerSelfLocated#f8ec284b to nil")
	}
	if err := b.ConsumeID(PeerSelfLocatedTypeID); err != nil {
		return fmt.Errorf("unable to decode peerSelfLocated#f8ec284b: %w", err)
	}
	return p.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (p *PeerSelfLocated) DecodeBare(b *bin.Buffer) error {
	if p == nil {
		return fmt.Errorf("can't decode peerSelfLocated#f8ec284b to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode peerSelfLocated#f8ec284b: field expires: %w", err)
		}
		p.Expires = value
	}
	return nil
}

// construct implements constructor of PeerLocatedClass.
func (p PeerSelfLocated) construct() PeerLocatedClass { return &p }

// Ensuring interfaces in compile-time for PeerSelfLocated.
var (
	_ bin.Encoder     = &PeerSelfLocated{}
	_ bin.Decoder     = &PeerSelfLocated{}
	_ bin.BareEncoder = &PeerSelfLocated{}
	_ bin.BareDecoder = &PeerSelfLocated{}

	_ PeerLocatedClass = &PeerSelfLocated{}
)

// PeerLocatedClass represents PeerLocated generic type.
//
// See https://core.telegram.org/type/PeerLocated for reference.
//
// Example:
//  g, err := tg.DecodePeerLocated(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *tg.PeerLocated: // peerLocated#ca461b5d
//  case *tg.PeerSelfLocated: // peerSelfLocated#f8ec284b
//  default: panic(v)
//  }
type PeerLocatedClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	tdp.Object
	construct() PeerLocatedClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeInfo returns TL type info.
	TypeInfo() tdp.Type
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	// Validity period of current data
	GetExpires() (value int)
}

// DecodePeerLocated implements binary de-serialization for PeerLocatedClass.
func DecodePeerLocated(buf *bin.Buffer) (PeerLocatedClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case PeerLocatedTypeID:
		// Decoding peerLocated#ca461b5d.
		v := PeerLocated{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode PeerLocatedClass: %w", err)
		}
		return &v, nil
	case PeerSelfLocatedTypeID:
		// Decoding peerSelfLocated#f8ec284b.
		v := PeerSelfLocated{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode PeerLocatedClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode PeerLocatedClass: %w", bin.NewUnexpectedID(id))
	}
}

// PeerLocated boxes the PeerLocatedClass providing a helper.
type PeerLocatedBox struct {
	PeerLocated PeerLocatedClass
}

// TypeInfo implements tdp.Object for PeerLocatedBox.
func (b *PeerLocatedBox) TypeInfo() tdp.Type {
	return b.PeerLocated.TypeInfo()
}

// Decode implements bin.Decoder for PeerLocatedBox.
func (b *PeerLocatedBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode PeerLocatedBox to nil")
	}
	v, err := DecodePeerLocated(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.PeerLocated = v
	return nil
}

// Encode implements bin.Encode for PeerLocatedBox.
func (b *PeerLocatedBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.PeerLocated == nil {
		return fmt.Errorf("unable to encode PeerLocatedClass as nil")
	}
	return b.PeerLocated.Encode(buf)
}

// PeerLocatedClassArray is adapter for slice of PeerLocatedClass.
type PeerLocatedClassArray []PeerLocatedClass

// Sort sorts slice of PeerLocatedClass.
func (s PeerLocatedClassArray) Sort(less func(a, b PeerLocatedClass) bool) PeerLocatedClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of PeerLocatedClass.
func (s PeerLocatedClassArray) SortStable(less func(a, b PeerLocatedClass) bool) PeerLocatedClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of PeerLocatedClass.
func (s PeerLocatedClassArray) Retain(keep func(x PeerLocatedClass) bool) PeerLocatedClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s PeerLocatedClassArray) First() (v PeerLocatedClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s PeerLocatedClassArray) Last() (v PeerLocatedClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *PeerLocatedClassArray) PopFirst() (v PeerLocatedClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero PeerLocatedClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *PeerLocatedClassArray) Pop() (v PeerLocatedClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsPeerLocated returns copy with only PeerLocated constructors.
func (s PeerLocatedClassArray) AsPeerLocated() (to PeerLocatedArray) {
	for _, elem := range s {
		value, ok := elem.(*PeerLocated)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsPeerSelfLocated returns copy with only PeerSelfLocated constructors.
func (s PeerLocatedClassArray) AsPeerSelfLocated() (to PeerSelfLocatedArray) {
	for _, elem := range s {
		value, ok := elem.(*PeerSelfLocated)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// PeerLocatedArray is adapter for slice of PeerLocated.
type PeerLocatedArray []PeerLocated

// Sort sorts slice of PeerLocated.
func (s PeerLocatedArray) Sort(less func(a, b PeerLocated) bool) PeerLocatedArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of PeerLocated.
func (s PeerLocatedArray) SortStable(less func(a, b PeerLocated) bool) PeerLocatedArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of PeerLocated.
func (s PeerLocatedArray) Retain(keep func(x PeerLocated) bool) PeerLocatedArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s PeerLocatedArray) First() (v PeerLocated, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s PeerLocatedArray) Last() (v PeerLocated, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *PeerLocatedArray) PopFirst() (v PeerLocated, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero PeerLocated
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *PeerLocatedArray) Pop() (v PeerLocated, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// PeerSelfLocatedArray is adapter for slice of PeerSelfLocated.
type PeerSelfLocatedArray []PeerSelfLocated

// Sort sorts slice of PeerSelfLocated.
func (s PeerSelfLocatedArray) Sort(less func(a, b PeerSelfLocated) bool) PeerSelfLocatedArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of PeerSelfLocated.
func (s PeerSelfLocatedArray) SortStable(less func(a, b PeerSelfLocated) bool) PeerSelfLocatedArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of PeerSelfLocated.
func (s PeerSelfLocatedArray) Retain(keep func(x PeerSelfLocated) bool) PeerSelfLocatedArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s PeerSelfLocatedArray) First() (v PeerSelfLocated, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s PeerSelfLocatedArray) Last() (v PeerSelfLocated, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *PeerSelfLocatedArray) PopFirst() (v PeerSelfLocated, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero PeerSelfLocated
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *PeerSelfLocatedArray) Pop() (v PeerSelfLocated, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
