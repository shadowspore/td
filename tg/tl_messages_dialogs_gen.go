// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
)

// MessagesDialogs represents TL type `messages.dialogs#15ba6c40`.
// Full list of chats with messages and auxiliary data.
//
// See https://core.telegram.org/constructor/messages.dialogs for reference.
type MessagesDialogs struct {
	// List of chats
	Dialogs []DialogClass
	// List of last messages from each chat
	Messages []MessageClass
	// List of groups mentioned in the chats
	Chats []ChatClass
	// List of users mentioned in messages and groups
	Users []UserClass
}

// MessagesDialogsTypeID is TL type id of MessagesDialogs.
const MessagesDialogsTypeID = 0x15ba6c40

func (d *MessagesDialogs) Zero() bool {
	if d == nil {
		return true
	}
	if !(d.Dialogs == nil) {
		return false
	}
	if !(d.Messages == nil) {
		return false
	}
	if !(d.Chats == nil) {
		return false
	}
	if !(d.Users == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (d *MessagesDialogs) String() string {
	if d == nil {
		return "MessagesDialogs(nil)"
	}
	type Alias MessagesDialogs
	return fmt.Sprintf("MessagesDialogs%+v", Alias(*d))
}

// FillFrom fills MessagesDialogs from given interface.
func (d *MessagesDialogs) FillFrom(from interface {
	GetDialogs() (value []DialogClass)
	GetMessages() (value []MessageClass)
	GetChats() (value []ChatClass)
	GetUsers() (value []UserClass)
}) {
	d.Dialogs = from.GetDialogs()
	d.Messages = from.GetMessages()
	d.Chats = from.GetChats()
	d.Users = from.GetUsers()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessagesDialogs) TypeID() uint32 {
	return MessagesDialogsTypeID
}

// TypeName returns name of type in TL schema.
func (*MessagesDialogs) TypeName() string {
	return "messages.dialogs"
}

// TypeInfo returns info about TL type.
func (d *MessagesDialogs) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messages.dialogs",
		ID:   MessagesDialogsTypeID,
	}
	if d == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Dialogs",
			SchemaName: "dialogs",
		},
		{
			Name:       "Messages",
			SchemaName: "messages",
		},
		{
			Name:       "Chats",
			SchemaName: "chats",
		},
		{
			Name:       "Users",
			SchemaName: "users",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (d *MessagesDialogs) Encode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode messages.dialogs#15ba6c40 as nil")
	}
	b.PutID(MessagesDialogsTypeID)
	return d.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (d *MessagesDialogs) EncodeBare(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode messages.dialogs#15ba6c40 as nil")
	}
	b.PutVectorHeader(len(d.Dialogs))
	for idx, v := range d.Dialogs {
		if v == nil {
			return fmt.Errorf("unable to encode messages.dialogs#15ba6c40: field dialogs element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.dialogs#15ba6c40: field dialogs element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(d.Messages))
	for idx, v := range d.Messages {
		if v == nil {
			return fmt.Errorf("unable to encode messages.dialogs#15ba6c40: field messages element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.dialogs#15ba6c40: field messages element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(d.Chats))
	for idx, v := range d.Chats {
		if v == nil {
			return fmt.Errorf("unable to encode messages.dialogs#15ba6c40: field chats element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.dialogs#15ba6c40: field chats element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(d.Users))
	for idx, v := range d.Users {
		if v == nil {
			return fmt.Errorf("unable to encode messages.dialogs#15ba6c40: field users element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.dialogs#15ba6c40: field users element with index %d: %w", idx, err)
		}
	}
	return nil
}

// GetDialogs returns value of Dialogs field.
func (d *MessagesDialogs) GetDialogs() (value []DialogClass) {
	return d.Dialogs
}

// MapDialogs returns field Dialogs wrapped in DialogClassArray helper.
func (d *MessagesDialogs) MapDialogs() (value DialogClassArray) {
	return DialogClassArray(d.Dialogs)
}

// GetMessages returns value of Messages field.
func (d *MessagesDialogs) GetMessages() (value []MessageClass) {
	return d.Messages
}

// MapMessages returns field Messages wrapped in MessageClassArray helper.
func (d *MessagesDialogs) MapMessages() (value MessageClassArray) {
	return MessageClassArray(d.Messages)
}

// GetChats returns value of Chats field.
func (d *MessagesDialogs) GetChats() (value []ChatClass) {
	return d.Chats
}

// MapChats returns field Chats wrapped in ChatClassArray helper.
func (d *MessagesDialogs) MapChats() (value ChatClassArray) {
	return ChatClassArray(d.Chats)
}

// GetUsers returns value of Users field.
func (d *MessagesDialogs) GetUsers() (value []UserClass) {
	return d.Users
}

// MapUsers returns field Users wrapped in UserClassArray helper.
func (d *MessagesDialogs) MapUsers() (value UserClassArray) {
	return UserClassArray(d.Users)
}

// Decode implements bin.Decoder.
func (d *MessagesDialogs) Decode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode messages.dialogs#15ba6c40 to nil")
	}
	if err := b.ConsumeID(MessagesDialogsTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.dialogs#15ba6c40: %w", err)
	}
	return d.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (d *MessagesDialogs) DecodeBare(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode messages.dialogs#15ba6c40 to nil")
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.dialogs#15ba6c40: field dialogs: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeDialog(b)
			if err != nil {
				return fmt.Errorf("unable to decode messages.dialogs#15ba6c40: field dialogs: %w", err)
			}
			d.Dialogs = append(d.Dialogs, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.dialogs#15ba6c40: field messages: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeMessage(b)
			if err != nil {
				return fmt.Errorf("unable to decode messages.dialogs#15ba6c40: field messages: %w", err)
			}
			d.Messages = append(d.Messages, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.dialogs#15ba6c40: field chats: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeChat(b)
			if err != nil {
				return fmt.Errorf("unable to decode messages.dialogs#15ba6c40: field chats: %w", err)
			}
			d.Chats = append(d.Chats, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.dialogs#15ba6c40: field users: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(b)
			if err != nil {
				return fmt.Errorf("unable to decode messages.dialogs#15ba6c40: field users: %w", err)
			}
			d.Users = append(d.Users, value)
		}
	}
	return nil
}

// construct implements constructor of MessagesDialogsClass.
func (d MessagesDialogs) construct() MessagesDialogsClass { return &d }

// Ensuring interfaces in compile-time for MessagesDialogs.
var (
	_ bin.Encoder     = &MessagesDialogs{}
	_ bin.Decoder     = &MessagesDialogs{}
	_ bin.BareEncoder = &MessagesDialogs{}
	_ bin.BareDecoder = &MessagesDialogs{}

	_ MessagesDialogsClass = &MessagesDialogs{}
)

// MessagesDialogsSlice represents TL type `messages.dialogsSlice#71e094f3`.
// Incomplete list of dialogs with messages and auxiliary data.
//
// See https://core.telegram.org/constructor/messages.dialogsSlice for reference.
type MessagesDialogsSlice struct {
	// Total number of dialogs
	Count int
	// List of dialogs
	Dialogs []DialogClass
	// List of last messages from dialogs
	Messages []MessageClass
	// List of chats mentioned in dialogs
	Chats []ChatClass
	// List of users mentioned in messages and chats
	Users []UserClass
}

// MessagesDialogsSliceTypeID is TL type id of MessagesDialogsSlice.
const MessagesDialogsSliceTypeID = 0x71e094f3

func (d *MessagesDialogsSlice) Zero() bool {
	if d == nil {
		return true
	}
	if !(d.Count == 0) {
		return false
	}
	if !(d.Dialogs == nil) {
		return false
	}
	if !(d.Messages == nil) {
		return false
	}
	if !(d.Chats == nil) {
		return false
	}
	if !(d.Users == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (d *MessagesDialogsSlice) String() string {
	if d == nil {
		return "MessagesDialogsSlice(nil)"
	}
	type Alias MessagesDialogsSlice
	return fmt.Sprintf("MessagesDialogsSlice%+v", Alias(*d))
}

// FillFrom fills MessagesDialogsSlice from given interface.
func (d *MessagesDialogsSlice) FillFrom(from interface {
	GetCount() (value int)
	GetDialogs() (value []DialogClass)
	GetMessages() (value []MessageClass)
	GetChats() (value []ChatClass)
	GetUsers() (value []UserClass)
}) {
	d.Count = from.GetCount()
	d.Dialogs = from.GetDialogs()
	d.Messages = from.GetMessages()
	d.Chats = from.GetChats()
	d.Users = from.GetUsers()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessagesDialogsSlice) TypeID() uint32 {
	return MessagesDialogsSliceTypeID
}

// TypeName returns name of type in TL schema.
func (*MessagesDialogsSlice) TypeName() string {
	return "messages.dialogsSlice"
}

// TypeInfo returns info about TL type.
func (d *MessagesDialogsSlice) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messages.dialogsSlice",
		ID:   MessagesDialogsSliceTypeID,
	}
	if d == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Count",
			SchemaName: "count",
		},
		{
			Name:       "Dialogs",
			SchemaName: "dialogs",
		},
		{
			Name:       "Messages",
			SchemaName: "messages",
		},
		{
			Name:       "Chats",
			SchemaName: "chats",
		},
		{
			Name:       "Users",
			SchemaName: "users",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (d *MessagesDialogsSlice) Encode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode messages.dialogsSlice#71e094f3 as nil")
	}
	b.PutID(MessagesDialogsSliceTypeID)
	return d.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (d *MessagesDialogsSlice) EncodeBare(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode messages.dialogsSlice#71e094f3 as nil")
	}
	b.PutInt(d.Count)
	b.PutVectorHeader(len(d.Dialogs))
	for idx, v := range d.Dialogs {
		if v == nil {
			return fmt.Errorf("unable to encode messages.dialogsSlice#71e094f3: field dialogs element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.dialogsSlice#71e094f3: field dialogs element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(d.Messages))
	for idx, v := range d.Messages {
		if v == nil {
			return fmt.Errorf("unable to encode messages.dialogsSlice#71e094f3: field messages element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.dialogsSlice#71e094f3: field messages element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(d.Chats))
	for idx, v := range d.Chats {
		if v == nil {
			return fmt.Errorf("unable to encode messages.dialogsSlice#71e094f3: field chats element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.dialogsSlice#71e094f3: field chats element with index %d: %w", idx, err)
		}
	}
	b.PutVectorHeader(len(d.Users))
	for idx, v := range d.Users {
		if v == nil {
			return fmt.Errorf("unable to encode messages.dialogsSlice#71e094f3: field users element with index %d is nil", idx)
		}
		if err := v.Encode(b); err != nil {
			return fmt.Errorf("unable to encode messages.dialogsSlice#71e094f3: field users element with index %d: %w", idx, err)
		}
	}
	return nil
}

// GetCount returns value of Count field.
func (d *MessagesDialogsSlice) GetCount() (value int) {
	return d.Count
}

// GetDialogs returns value of Dialogs field.
func (d *MessagesDialogsSlice) GetDialogs() (value []DialogClass) {
	return d.Dialogs
}

// MapDialogs returns field Dialogs wrapped in DialogClassArray helper.
func (d *MessagesDialogsSlice) MapDialogs() (value DialogClassArray) {
	return DialogClassArray(d.Dialogs)
}

// GetMessages returns value of Messages field.
func (d *MessagesDialogsSlice) GetMessages() (value []MessageClass) {
	return d.Messages
}

// MapMessages returns field Messages wrapped in MessageClassArray helper.
func (d *MessagesDialogsSlice) MapMessages() (value MessageClassArray) {
	return MessageClassArray(d.Messages)
}

// GetChats returns value of Chats field.
func (d *MessagesDialogsSlice) GetChats() (value []ChatClass) {
	return d.Chats
}

// MapChats returns field Chats wrapped in ChatClassArray helper.
func (d *MessagesDialogsSlice) MapChats() (value ChatClassArray) {
	return ChatClassArray(d.Chats)
}

// GetUsers returns value of Users field.
func (d *MessagesDialogsSlice) GetUsers() (value []UserClass) {
	return d.Users
}

// MapUsers returns field Users wrapped in UserClassArray helper.
func (d *MessagesDialogsSlice) MapUsers() (value UserClassArray) {
	return UserClassArray(d.Users)
}

// Decode implements bin.Decoder.
func (d *MessagesDialogsSlice) Decode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode messages.dialogsSlice#71e094f3 to nil")
	}
	if err := b.ConsumeID(MessagesDialogsSliceTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.dialogsSlice#71e094f3: %w", err)
	}
	return d.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (d *MessagesDialogsSlice) DecodeBare(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode messages.dialogsSlice#71e094f3 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.dialogsSlice#71e094f3: field count: %w", err)
		}
		d.Count = value
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.dialogsSlice#71e094f3: field dialogs: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeDialog(b)
			if err != nil {
				return fmt.Errorf("unable to decode messages.dialogsSlice#71e094f3: field dialogs: %w", err)
			}
			d.Dialogs = append(d.Dialogs, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.dialogsSlice#71e094f3: field messages: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeMessage(b)
			if err != nil {
				return fmt.Errorf("unable to decode messages.dialogsSlice#71e094f3: field messages: %w", err)
			}
			d.Messages = append(d.Messages, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.dialogsSlice#71e094f3: field chats: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeChat(b)
			if err != nil {
				return fmt.Errorf("unable to decode messages.dialogsSlice#71e094f3: field chats: %w", err)
			}
			d.Chats = append(d.Chats, value)
		}
	}
	{
		headerLen, err := b.VectorHeader()
		if err != nil {
			return fmt.Errorf("unable to decode messages.dialogsSlice#71e094f3: field users: %w", err)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := DecodeUser(b)
			if err != nil {
				return fmt.Errorf("unable to decode messages.dialogsSlice#71e094f3: field users: %w", err)
			}
			d.Users = append(d.Users, value)
		}
	}
	return nil
}

// construct implements constructor of MessagesDialogsClass.
func (d MessagesDialogsSlice) construct() MessagesDialogsClass { return &d }

// Ensuring interfaces in compile-time for MessagesDialogsSlice.
var (
	_ bin.Encoder     = &MessagesDialogsSlice{}
	_ bin.Decoder     = &MessagesDialogsSlice{}
	_ bin.BareEncoder = &MessagesDialogsSlice{}
	_ bin.BareDecoder = &MessagesDialogsSlice{}

	_ MessagesDialogsClass = &MessagesDialogsSlice{}
)

// MessagesDialogsNotModified represents TL type `messages.dialogsNotModified#f0e3e596`.
// Dialogs haven't changed
//
// See https://core.telegram.org/constructor/messages.dialogsNotModified for reference.
type MessagesDialogsNotModified struct {
	// Number of dialogs found server-side by the query
	Count int
}

// MessagesDialogsNotModifiedTypeID is TL type id of MessagesDialogsNotModified.
const MessagesDialogsNotModifiedTypeID = 0xf0e3e596

func (d *MessagesDialogsNotModified) Zero() bool {
	if d == nil {
		return true
	}
	if !(d.Count == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (d *MessagesDialogsNotModified) String() string {
	if d == nil {
		return "MessagesDialogsNotModified(nil)"
	}
	type Alias MessagesDialogsNotModified
	return fmt.Sprintf("MessagesDialogsNotModified%+v", Alias(*d))
}

// FillFrom fills MessagesDialogsNotModified from given interface.
func (d *MessagesDialogsNotModified) FillFrom(from interface {
	GetCount() (value int)
}) {
	d.Count = from.GetCount()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessagesDialogsNotModified) TypeID() uint32 {
	return MessagesDialogsNotModifiedTypeID
}

// TypeName returns name of type in TL schema.
func (*MessagesDialogsNotModified) TypeName() string {
	return "messages.dialogsNotModified"
}

// TypeInfo returns info about TL type.
func (d *MessagesDialogsNotModified) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messages.dialogsNotModified",
		ID:   MessagesDialogsNotModifiedTypeID,
	}
	if d == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Count",
			SchemaName: "count",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (d *MessagesDialogsNotModified) Encode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode messages.dialogsNotModified#f0e3e596 as nil")
	}
	b.PutID(MessagesDialogsNotModifiedTypeID)
	return d.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (d *MessagesDialogsNotModified) EncodeBare(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't encode messages.dialogsNotModified#f0e3e596 as nil")
	}
	b.PutInt(d.Count)
	return nil
}

// GetCount returns value of Count field.
func (d *MessagesDialogsNotModified) GetCount() (value int) {
	return d.Count
}

// Decode implements bin.Decoder.
func (d *MessagesDialogsNotModified) Decode(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode messages.dialogsNotModified#f0e3e596 to nil")
	}
	if err := b.ConsumeID(MessagesDialogsNotModifiedTypeID); err != nil {
		return fmt.Errorf("unable to decode messages.dialogsNotModified#f0e3e596: %w", err)
	}
	return d.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (d *MessagesDialogsNotModified) DecodeBare(b *bin.Buffer) error {
	if d == nil {
		return fmt.Errorf("can't decode messages.dialogsNotModified#f0e3e596 to nil")
	}
	{
		value, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode messages.dialogsNotModified#f0e3e596: field count: %w", err)
		}
		d.Count = value
	}
	return nil
}

// construct implements constructor of MessagesDialogsClass.
func (d MessagesDialogsNotModified) construct() MessagesDialogsClass { return &d }

// Ensuring interfaces in compile-time for MessagesDialogsNotModified.
var (
	_ bin.Encoder     = &MessagesDialogsNotModified{}
	_ bin.Decoder     = &MessagesDialogsNotModified{}
	_ bin.BareEncoder = &MessagesDialogsNotModified{}
	_ bin.BareDecoder = &MessagesDialogsNotModified{}

	_ MessagesDialogsClass = &MessagesDialogsNotModified{}
)

// MessagesDialogsClass represents messages.Dialogs generic type.
//
// See https://core.telegram.org/type/messages.Dialogs for reference.
//
// Example:
//  g, err := tg.DecodeMessagesDialogs(buf)
//  if err != nil {
//      panic(err)
//  }
//  switch v := g.(type) {
//  case *tg.MessagesDialogs: // messages.dialogs#15ba6c40
//  case *tg.MessagesDialogsSlice: // messages.dialogsSlice#71e094f3
//  case *tg.MessagesDialogsNotModified: // messages.dialogsNotModified#f0e3e596
//  default: panic(v)
//  }
type MessagesDialogsClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	tdp.Object
	construct() MessagesDialogsClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeInfo returns TL type info.
	TypeInfo() tdp.Type
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	// AsModified tries to map MessagesDialogsClass to ModifiedMessagesDialogs.
	AsModified() (ModifiedMessagesDialogs, bool)
}

// ModifiedMessagesDialogs represents Modified subset of MessagesDialogsClass.
type ModifiedMessagesDialogs interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	tdp.Object
	construct() MessagesDialogsClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeInfo returns TL type info.
	TypeInfo() tdp.Type
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	// List of chats
	GetDialogs() (value []DialogClass)

	// List of last messages from each chat
	GetMessages() (value []MessageClass)

	// List of groups mentioned in the chats
	GetChats() (value []ChatClass)

	// List of users mentioned in messages and groups
	GetUsers() (value []UserClass)
}

// AsModified tries to map MessagesDialogs to ModifiedMessagesDialogs.
func (d *MessagesDialogs) AsModified() (ModifiedMessagesDialogs, bool) {
	value, ok := (MessagesDialogsClass(d)).(ModifiedMessagesDialogs)
	return value, ok
}

// AsModified tries to map MessagesDialogsSlice to ModifiedMessagesDialogs.
func (d *MessagesDialogsSlice) AsModified() (ModifiedMessagesDialogs, bool) {
	value, ok := (MessagesDialogsClass(d)).(ModifiedMessagesDialogs)
	return value, ok
}

// AsModified tries to map MessagesDialogsNotModified to ModifiedMessagesDialogs.
func (d *MessagesDialogsNotModified) AsModified() (ModifiedMessagesDialogs, bool) {
	value, ok := (MessagesDialogsClass(d)).(ModifiedMessagesDialogs)
	return value, ok
}

// DecodeMessagesDialogs implements binary de-serialization for MessagesDialogsClass.
func DecodeMessagesDialogs(buf *bin.Buffer) (MessagesDialogsClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case MessagesDialogsTypeID:
		// Decoding messages.dialogs#15ba6c40.
		v := MessagesDialogs{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessagesDialogsClass: %w", err)
		}
		return &v, nil
	case MessagesDialogsSliceTypeID:
		// Decoding messages.dialogsSlice#71e094f3.
		v := MessagesDialogsSlice{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessagesDialogsClass: %w", err)
		}
		return &v, nil
	case MessagesDialogsNotModifiedTypeID:
		// Decoding messages.dialogsNotModified#f0e3e596.
		v := MessagesDialogsNotModified{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessagesDialogsClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode MessagesDialogsClass: %w", bin.NewUnexpectedID(id))
	}
}

// MessagesDialogs boxes the MessagesDialogsClass providing a helper.
type MessagesDialogsBox struct {
	Dialogs MessagesDialogsClass
}

// TypeInfo implements tdp.Object for MessagesDialogsBox.
func (b *MessagesDialogsBox) TypeInfo() tdp.Type {
	return b.Dialogs.TypeInfo()
}

// Decode implements bin.Decoder for MessagesDialogsBox.
func (b *MessagesDialogsBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode MessagesDialogsBox to nil")
	}
	v, err := DecodeMessagesDialogs(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.Dialogs = v
	return nil
}

// Encode implements bin.Encode for MessagesDialogsBox.
func (b *MessagesDialogsBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.Dialogs == nil {
		return fmt.Errorf("unable to encode MessagesDialogsClass as nil")
	}
	return b.Dialogs.Encode(buf)
}

// MessagesDialogsClassArray is adapter for slice of MessagesDialogsClass.
type MessagesDialogsClassArray []MessagesDialogsClass

// Sort sorts slice of MessagesDialogsClass.
func (s MessagesDialogsClassArray) Sort(less func(a, b MessagesDialogsClass) bool) MessagesDialogsClassArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessagesDialogsClass.
func (s MessagesDialogsClassArray) SortStable(less func(a, b MessagesDialogsClass) bool) MessagesDialogsClassArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessagesDialogsClass.
func (s MessagesDialogsClassArray) Retain(keep func(x MessagesDialogsClass) bool) MessagesDialogsClassArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessagesDialogsClassArray) First() (v MessagesDialogsClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessagesDialogsClassArray) Last() (v MessagesDialogsClass, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessagesDialogsClassArray) PopFirst() (v MessagesDialogsClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessagesDialogsClass
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessagesDialogsClassArray) Pop() (v MessagesDialogsClass, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// AsMessagesDialogs returns copy with only MessagesDialogs constructors.
func (s MessagesDialogsClassArray) AsMessagesDialogs() (to MessagesDialogsArray) {
	for _, elem := range s {
		value, ok := elem.(*MessagesDialogs)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessagesDialogsSlice returns copy with only MessagesDialogsSlice constructors.
func (s MessagesDialogsClassArray) AsMessagesDialogsSlice() (to MessagesDialogsSliceArray) {
	for _, elem := range s {
		value, ok := elem.(*MessagesDialogsSlice)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AsMessagesDialogsNotModified returns copy with only MessagesDialogsNotModified constructors.
func (s MessagesDialogsClassArray) AsMessagesDialogsNotModified() (to MessagesDialogsNotModifiedArray) {
	for _, elem := range s {
		value, ok := elem.(*MessagesDialogsNotModified)
		if !ok {
			continue
		}
		to = append(to, *value)
	}

	return to
}

// AppendOnlyModified appends only Modified constructors to
// given slice.
func (s MessagesDialogsClassArray) AppendOnlyModified(to []ModifiedMessagesDialogs) []ModifiedMessagesDialogs {
	for _, elem := range s {
		value, ok := elem.AsModified()
		if !ok {
			continue
		}
		to = append(to, value)
	}

	return to
}

// AsModified returns copy with only Modified constructors.
func (s MessagesDialogsClassArray) AsModified() (to []ModifiedMessagesDialogs) {
	return s.AppendOnlyModified(to)
}

// FirstAsModified returns first element of slice (if exists).
func (s MessagesDialogsClassArray) FirstAsModified() (v ModifiedMessagesDialogs, ok bool) {
	value, ok := s.First()
	if !ok {
		return
	}
	return value.AsModified()
}

// LastAsModified returns last element of slice (if exists).
func (s MessagesDialogsClassArray) LastAsModified() (v ModifiedMessagesDialogs, ok bool) {
	value, ok := s.Last()
	if !ok {
		return
	}
	return value.AsModified()
}

// PopFirstAsModified returns element of slice (if exists).
func (s *MessagesDialogsClassArray) PopFirstAsModified() (v ModifiedMessagesDialogs, ok bool) {
	value, ok := s.PopFirst()
	if !ok {
		return
	}
	return value.AsModified()
}

// PopAsModified returns element of slice (if exists).
func (s *MessagesDialogsClassArray) PopAsModified() (v ModifiedMessagesDialogs, ok bool) {
	value, ok := s.Pop()
	if !ok {
		return
	}
	return value.AsModified()
}

// MessagesDialogsArray is adapter for slice of MessagesDialogs.
type MessagesDialogsArray []MessagesDialogs

// Sort sorts slice of MessagesDialogs.
func (s MessagesDialogsArray) Sort(less func(a, b MessagesDialogs) bool) MessagesDialogsArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessagesDialogs.
func (s MessagesDialogsArray) SortStable(less func(a, b MessagesDialogs) bool) MessagesDialogsArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessagesDialogs.
func (s MessagesDialogsArray) Retain(keep func(x MessagesDialogs) bool) MessagesDialogsArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessagesDialogsArray) First() (v MessagesDialogs, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessagesDialogsArray) Last() (v MessagesDialogs, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessagesDialogsArray) PopFirst() (v MessagesDialogs, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessagesDialogs
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessagesDialogsArray) Pop() (v MessagesDialogs, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessagesDialogsSliceArray is adapter for slice of MessagesDialogsSlice.
type MessagesDialogsSliceArray []MessagesDialogsSlice

// Sort sorts slice of MessagesDialogsSlice.
func (s MessagesDialogsSliceArray) Sort(less func(a, b MessagesDialogsSlice) bool) MessagesDialogsSliceArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessagesDialogsSlice.
func (s MessagesDialogsSliceArray) SortStable(less func(a, b MessagesDialogsSlice) bool) MessagesDialogsSliceArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessagesDialogsSlice.
func (s MessagesDialogsSliceArray) Retain(keep func(x MessagesDialogsSlice) bool) MessagesDialogsSliceArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessagesDialogsSliceArray) First() (v MessagesDialogsSlice, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessagesDialogsSliceArray) Last() (v MessagesDialogsSlice, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessagesDialogsSliceArray) PopFirst() (v MessagesDialogsSlice, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessagesDialogsSlice
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessagesDialogsSliceArray) Pop() (v MessagesDialogsSlice, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// MessagesDialogsNotModifiedArray is adapter for slice of MessagesDialogsNotModified.
type MessagesDialogsNotModifiedArray []MessagesDialogsNotModified

// Sort sorts slice of MessagesDialogsNotModified.
func (s MessagesDialogsNotModifiedArray) Sort(less func(a, b MessagesDialogsNotModified) bool) MessagesDialogsNotModifiedArray {
	sort.Slice(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// SortStable sorts slice of MessagesDialogsNotModified.
func (s MessagesDialogsNotModifiedArray) SortStable(less func(a, b MessagesDialogsNotModified) bool) MessagesDialogsNotModifiedArray {
	sort.SliceStable(s, func(i, j int) bool {
		return less(s[i], s[j])
	})
	return s
}

// Retain filters in-place slice of MessagesDialogsNotModified.
func (s MessagesDialogsNotModifiedArray) Retain(keep func(x MessagesDialogsNotModified) bool) MessagesDialogsNotModifiedArray {
	n := 0
	for _, x := range s {
		if keep(x) {
			s[n] = x
			n++
		}
	}
	s = s[:n]

	return s
}

// First returns first element of slice (if exists).
func (s MessagesDialogsNotModifiedArray) First() (v MessagesDialogsNotModified, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[0], true
}

// Last returns last element of slice (if exists).
func (s MessagesDialogsNotModifiedArray) Last() (v MessagesDialogsNotModified, ok bool) {
	if len(s) < 1 {
		return
	}
	return s[len(s)-1], true
}

// PopFirst returns first element of slice (if exists) and deletes it.
func (s *MessagesDialogsNotModifiedArray) PopFirst() (v MessagesDialogsNotModified, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[0]

	// Delete by index from SliceTricks.
	copy(a[0:], a[1:])
	var zero MessagesDialogsNotModified
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	*s = a

	return v, true
}

// Pop returns last element of slice (if exists) and deletes it.
func (s *MessagesDialogsNotModifiedArray) Pop() (v MessagesDialogsNotModified, ok bool) {
	if s == nil || len(*s) < 1 {
		return
	}

	a := *s
	v = a[len(a)-1]
	a = a[:len(a)-1]
	*s = a

	return v, true
}
